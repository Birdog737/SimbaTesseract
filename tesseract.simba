(*
Tesseract
=========

Tesseract is an open source text recognition (OCR) Engine.
https://github.com/tesseract-ocr/tesseract

Tesseract attempts to read virtually any text providing the image is processed enough.
This include will process the image with resizing and thresholding. Or you can pass you rown TMufasaBitmap image to be recognized.

Why resizing?
Tesseract wants at least ~25 pixels height text. We can achieve this by scaling up the area.

What is thresholding?

If a pixel is brightness is greater than a "threshold" value the pixel is marked as white else black.
This creates a binary image (which is an image that only contains two colors)

A picture is worth a thousand words...

Before thresholding:

with `-0.1` threshold:

with `-0.9` threshold:

----

Now if the text is *darker* than the background a postive threshold can be used:

Before thresholding:

with `0.3` threshold:


*)

{$loadlib libtesseract}

type
  TTesseractMatch = record
    Text: String;
    Bounds: TBox;
    Confidence: Single;
  end;
  TTesseractMatchArray = array of TTesseractMatch;

  TTesseractOCR = record
  class const
    CHARS_UPPERCASE  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    CHARS_LOWERCASE  = 'abcdefghijklmnopqrstuvwxyz';
    CHARS_DIGITS     = '0123456789';
    CHARS_NUMBER     = '0123456789,.';
    CHARS_LETTERS    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    CHARS_SYMBOLS    = '.,-<>?+=()/\*@![]#~';
    CHARS_WHITESPACE = #10+#13+#32;
  var
    ResizeMultiplier: Single;
    MinMatch: Single;
    ThresholdRadius: Integer;
    Instance: Pointer;
    Area: TBox;
    Bitmap: TMufasaBitmap;
  end;

procedure TTesseractOCR.SetWhitelist(Value: String);
begin
  if (Value = '') then
    Value := #0;

  Tesseract_SetVariable(Self.Instance, 'tessedit_char_whitelist', Value);
end;

procedure TTesseractOCR.SetBlacklist(Value: String);
begin
  if (Value = '') then
    Value := #0;

  Tesseract_SetVariable(Self.Instance, 'tessedit_char_blacklist', Value);
end;

procedure TTesseractOCR.SetMinMatch(Value: Single);
begin
  Self.MinMatch := Value;
end;

procedure TTesseractOCR.ClearWhitelist;
begin
  Self.SetWhitelist('');
end;

procedure TTesseractOCR.ClearBlacklist;
begin
  Self.SetBlacklist('');
end;

function TTesseractOCR.GetTextEx(MinMatch: Single): String;
var
  Match: TTesseractMatch;
begin
  for Match in Self.GetCharacterMatches() do
    if (Match.Confidence > MinMatch) then
      Result := Result + Match.Text;
end;

function TTesseractOCR.GetText: String;
var
  Text: PChar;
  TextLength: Integer;
begin
  Text := Tesseract_GetUTF8Text(Self.Instance, TextLength);
  if (Self.MinMatch > 0) then
    Result := Self.GetTextEx(Self.MinMatch)
  else
  begin
    SetLength(Result, TextLength);
    if (TextLength > 0) then
      Move(Text^, Result[1], TextLength);
    Result := Trim(StringReplace(Result, #10, LineEnding, [rfReplaceAll]));
  end;

  Tesseract_FreeUTF8Text(Text);
end;

(*
 * If the text is BRIGHTER than the background the threshold will be greater than 0.
 * If the text is DARKER than the background the threshold will be less than 0.
 *
 * - Generally speaking the higher the threshold is the more the text will be eroded.
 * - Call TesseractOCR.Debug() after this to see what the image was processed into.
 *)
function TTesseractOCR.Recognize(Area: TBox; Threshold: Single): String; overload;
begin
  if (Self.Bitmap <> nil) then
  begin
    Self.Bitmap.Free();
    Self.Bitmap := nil;
  end;

  Self.Area := Area;
  Self.Bitmap := TMufasaBitmap.CreateFromClient(Self.Area);

  // Assume smallest font is is 8px
  // Tesseract wants something like ~25px. 8*3.5 = 28
  Self.Bitmap.ResizeBilinear(Trunc(Self.Bitmap.GetWidth() * Self.ResizeMultiplier), Trunc(Self.Bitmap.GetHeight() * Self.ResizeMultiplier));
  Self.Bitmap.ThresholdSauvola(Self.ThresholdRadius, True, Threshold);

  Result := Self.Recognize(Self.Bitmap);
end;

function TTesseractOCR.Recognize(Bitmap: TMufasaBitmap): String; overload;
begin
  Tesseract_SetImage(Self.Instance, Bitmap.GetData(), Bitmap.GetWidth(), Bitmap.GetHeight(), 4, Bitmap.GetWidth() * 4);

  Result := Self.GetText();
end;

function TTesseractOCR.GetMatches(GetMatchFunc, GetCountFunc: Pointer): TTesseractMatchArray;
type
  TGetMatchCount = function(Tesseract: Pointer): Integer;
  TGetMatch = procedure(Tesseract: Pointer; Index: Integer; var Text: PChar; var Len: Integer; var Confidence: Single; var X1, Y1, X2, Y2: Integer);
var
  I, TextLen: Integer;
  Text: PChar;
  B: TBox;
  Confidence: Single;
begin
  SetLength(Result, TGetMatchCount(GetCountFunc)(Self.Instance));
  for I := 0 to High(Result) do
  begin
    TGetMatch(GetMatchFunc)(Self.Instance, I, Text, TextLen, Confidence, B.X1, B.Y1, B.X2, B.Y2);

    B.X1 := Self.Area.X1 + Round(B.X1 / Self.ResizeMultiplier);
    B.Y1 := Self.Area.Y1 + Round(B.Y1 / Self.ResizeMultiplier);
    B.X2 := Self.Area.X1 + Round(B.X2 / Self.ResizeMultiplier);
    B.Y2 := Self.Area.Y1 + Round(B.Y2 / Self.ResizeMultiplier);

    Result[I].Confidence := Confidence;
    Result[I].Bounds := B;

    SetLength(Result[I].Text, TextLen);
    if (TextLen > 0) then
      Move(Text^, Result[I].Text[1], TextLen);

    Tesseract_FreeUTF8Text(Text);
  end;
end;

function TTesseractOCR.GetCharacterMatches: TTesseractMatchArray;
begin
  Result := Self.GetMatches(@Tesseract_GetCharacterMatch, @Tesseract_GetCharacterCount);
end;

function TTesseractOCR.GetWordMatches: TTesseractMatchArray;
begin
  Result := Self.GetMatches(@Tesseract_GetWordMatch, @Tesseract_GetWordCount);
end;

function TTesseractOCR.GetLineMatches: TTesseractMatchArray;
begin
  Result := Self.GetMatches(@Tesseract_GetLineMatch, @Tesseract_GetLineCount);
end;

function TTesseractOCR.GetBlockMatches: TTesseractMatchArray;
begin
  Result := Self.GetMatches(@Tesseract_GetBlockMatch, @Tesseract_GetBlockCount);
end;

function TTesseractOCR.GetTextBounds: TBox;
var
  Matches: TTesseractMatchArray;
begin
  Matches := Self.GetBlockMatches();
  if Length(Matches) > 0 then
    Result := Matches[0].Bounds;
end;

procedure TTesseractOCR.Debug;
var
  Match: TTesseractMatch;
  Matches: TSingleArray;
begin
  WriteLn('--------------------------------------------------');
  WriteLn('TEXT:');
  Write(' ');
  WriteLn('"%s"'.Format([Self.GetText()]));

  WriteLn('MATCHES:');
  Write(' ');
  for Match in Self.GetCharacterMatches() do
    Write('"%s" %f, '.Format([Match.Text, Match.Confidence]));
  WriteLn();

  WriteLn('AVERAGE:');
  Write(' ');
  for Match in Self.GetCharacterMatches() do
    Matches += Match.Confidence;
  WriteLn('%f'.Format([Matches.Mean()]));
  WriteLn('--------------------------------------------------');

  Self.Bitmap.Show();
end;

procedure TTesseractOCR.Free;
begin
  if (Self.Bitmap <> nil) then
  begin
    Self.Bitmap.Free();
    Self.Bitmap := nil;
  end;

  if (Self.Instance <> nil) then
  begin
    Tesseract_End(Self.Instance);
    Tesseract_Delete(Self.Instance);

    Self.Instance := nil;
  end;
end;

procedure TTesseractOCR.Setup;
begin
  Self.Instance := Tesseract_Create();
  Self.ResizeMultiplier := 3.5;
  Self.ThresholdRadius := 50;

  Tesseract_Init(Self.Instance, {$MACRO CURRENT_DIRECTORY} + '/tessdata', 'eng');
  Tesseract_SetVariable(Self.Instance, 'user_defined_dpi', '70');

  AddOnTerminate(@Self.Free);
end;

var
  TesseractOCR: TTesseractOCR;

begin
  TesseractOCR.Setup();
end;
